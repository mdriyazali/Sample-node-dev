name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}  # Secret for PostgreSQL password
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: mydb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 30s  # Increase timeout to 30 seconds
          --health-retries 5
    steps:
      - name: Wait for PostgreSQL to start
        run: |
          retries=0
          until docker inspect -f '{{.State.Health.Status}}' 2be4586acab4c4ab80b3e56478b9e8c4f36030a106ab5d1bd2907bec177e9e24 | grep -q 'healthy' || (( retries++ >= 30 ))
          sleep 10

      - name: Set up .env file
        run: |
          echo "PORT=3000" > .env
          echo "HOST=localhost" >> .env
          echo "POSTGRES_DB_CONNECTION_URL=postgres://myuser:$PGPASSWORD@localhost:5432/mydb" >> .env
          echo "AUTH_ACCESS_TOKEN_SECRET=7d5592eaa2a67bbb11cd78c536b0c65d23f5c2f6e94d72c86d08c3da38fda109" >> .env
          echo "AUTH_REFRESH_TOKEN_SECRET=7d5592eaa2a67bbb11cd78c536b0c65d23f5c2f6e94d72c86d08c3da38fda109" >> .env
          echo "AUTH_ACCESS_TOKEN_DURATION=300000" >> .env
          echo "AUTH_REFRESH_TOKEN_DURATION=86400000" >> .env
          cp .env .env.test  # Copy .env to .env.test for testing environment

      - name: Verify PostgreSQL connection
        run: |
          psql -h localhost -U myuser -d mydb -c "SELECT version();"

      - name: Run tests
        run: yarn test
